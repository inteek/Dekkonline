@using System.Web.Optimization;
@model List<DekkOnlineMVC.Models.Headphone>




@{
    ViewBag.Title = "Products";
}


@Scripts.Render("~/bundles/jquery")
<script>
        function loadProducts(s, e) {
            xcpProducts.PerformCallback();
        }


        function showDetails(s, e) {

            s.GetRowValues(s.GetFocusedRowIndex(), 'Id', setDP);
        }

        function setDP(values) {

            $("#pdImage").html($("#psImage" + values).html());
            popDetails.Show();
        }


        $(document).ready(function(){

            $("#principalDiv").attr("class", "prDivSub");
            $("#mainContainDiv").attr("class", "prMainContentSub");


        });

</script>



        <div class="searchWrap" style="top:-300px">
            <div class="searchContain">
                <div class="col-md-3">
                    <span class="sTitle">SIZE:</span><br />
                    <div class="floatLt dp1">
                        @*<dx:ASPxComboBox runat="server" ID="cmbWidth" ClientInstanceName="cmbWidth" CssClass="BoxGeneral" Border-BorderStyle="None" ClearButton-DisplayMode="OnHover">
                                <DropDownButton ImagePosition="Bottom">
                                    <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                                </DropDownButton>
                                <ClientSideEvents ValueChanged="loadProducts" />
                            </dx:ASPxComboBox>*@
                        <select id="cmbWidth" Class="BoxGeneral"></select>
                    </div>
                    <div class="floatLt diagonal">
                    </div>
                    <div class="floatLt dp2">
                        @*<dx:ASPxComboBox runat="server" ID="cmbProfile" ClientInstanceName="cmbProfile" CssClass="BoxGeneral" Border-BorderStyle="None" ClearButton-DisplayMode="OnHover">
                                <DropDownButton ImagePosition="Bottom">
                                    <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                                </DropDownButton>
                                <ClientSideEvents ValueChanged="loadProducts" />
                            </dx:ASPxComboBox>*@
                        <select id="cmbProfile" Class="BoxGeneral"></select>
                    </div>
                    <div class="floatLt dp3">
                        @*<dx:ASPxComboBox runat="server" ID="cmbDiameter" ClientInstanceName="cmbDiameter" CssClass="BoxGeneral" Border-BorderStyle="None" ClearButton-DisplayMode="OnHover">
                                <DropDownButton ImagePosition="Bottom">
                                    <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                                </DropDownButton>
                                <ClientSideEvents ValueChanged="loadProducts" />
                            </dx:ASPxComboBox>*@
                        <select id="cmbDiameter" Class="BoxGeneral"></select>
                    </div>
                </div>
                <div class="col-md-3">
                    <span class="sTitle">COVER TYPE:</span><br />
                    @*<dx:ASPxComboBox runat="server" ID="cmbCategory" ClientInstanceName="cmbCategory" CssClass="BoxGeneral" Border-BorderStyle="None" ClearButton-DisplayMode="OnHover">
                            <DropDownButton ImagePosition="Bottom">
                                <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                            </DropDownButton>
                            <ClientSideEvents ValueChanged="loadProducts" />
                        </dx:ASPxComboBox>*@
                    <select id="cmbCategory" Class="BoxGeneral"></select>
                </div>
                <div class="col-md-3">
                    <span class="sTitle">BRAND:</span><br />
                    @*<dx:ASPxComboBox runat="server" ID="cmbBrand" ClientInstanceName="cmbBrand" CssClass="BoxGeneral" Border-BorderStyle="None" ClearButton-DisplayMode="OnHover">
                            <DropDownButton ImagePosition="Bottom">
                                <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                            </DropDownButton>
                            <ClientSideEvents ValueChanged="loadProducts" />
                        </dx:ASPxComboBox>*@
                    <select id="cmbBrand" Class="BoxGeneral"></select>
                </div>
                <div class="col-md-3">
                    <span class="sTitle">PRICE:</span><br />
                    @*<dx:ASPxComboBox runat="server" ID="cmbPrice" ClientInstanceName="cmbPrice" CssClass="BoxGeneral" Border-BorderStyle="None">
                            <DropDownButton ImagePosition="Bottom">
                                <Image Url="/Scripts/imgs/flecha_dropdown-01.png" Height="10px" Width="10px"></Image>
                            </DropDownButton>
                            <Items>
                                <dx:ListEditItem Selected="true" Text="lowest - highest" Value="0" />
                                <dx:ListEditItem Selected="false" Text="highest - lowest" Value="1" />
                            </Items>
                            <ClientSideEvents ValueChanged="loadProducts" />
                        </dx:ASPxComboBox>*@
                    <select id="cmbPrice" Class="BoxGeneral">
                        <option value="0">lowest - highest</option>
                        <option value="1">highest - lowest</option>
                    </select>
                </div>
                <div class="clearfix"></div>
                <div class="spacer10"></div>
                <div class="clearfix"></div>

                <div id="xcpProducts" Width="100%">
                    <!--AQUI VA EL GRID-->

                    <script>
    function OnToolbarItemClick(s, e){
        e.processOnServer = true;
    }
    function OnSortingChanged(s, e){
        HeadphoneCards.PerformCallback();
    }
    function OnHeadphoneCardsBeginCallback(s, e){
        e.customArgs["isCardView"] = this.IsCardView();
        e.customArgs["sortMode"] = Sorting.GetValue();
    }
    function IsCardView(){
        return HeadphoneCards.GetToolbar(0).GetItemByName("CardView").GetChecked();
    }
                    </script>



              


             @*@Html.DevExpress().CardView(settings =>
        {
            settings.Name = "HeadphoneCards";
            //settings.CallbackRouteValues = new { Controller = "DekkController", Action = "ProductsCardView" };
            settings.Width = Unit.Percentage(100);

            /*
            settings.Toolbars.Add(t =>
            {
                t.ItemAlign = GridToolbarItemAlign.Justify;
                t.Items.Add(i =>
                {
                    i.ItemStyle.Width = Unit.Percentage(100);
                    i.SetTemplateContent(c =>
                    {
                        Html.DevExpress().ComboBox(s =>
                        {
                            s.Name = "Sorting";
                            s.Width = 200;
                            s.Properties.Caption = "Sort by";
                            s.Properties.ValueType = typeof(HeadphoneCardsSortMode);
                            s.Properties.Items.Add("Recomended", HeadphoneCardsSortMode.Recomended);
                            s.Properties.Items.Add("Discount", HeadphoneCardsSortMode.Discount);
                            s.Properties.Items.Add("Low Price » High Price", HeadphoneCardsSortMode.LowPrice);
                            s.Properties.Items.Add("High Price » Low Price", HeadphoneCardsSortMode.HighPrice);
                            s.Properties.ClientSideEvents.ValueChanged = "OnSortingChanged";
                        }).Bind(ViewBag.SortMode).Render();
                    });
                });
                t.Items.Add(i =>
                {
                    i.Name = "ListView";
                    i.ToolTip = "Details View";
                    i.GroupName = "Layout";
                    i.BeginGroup = true;
                    i.Checked = !ViewBag.IsCardView;
                    i.Image.IconID = DevExpress.Web.ASPxThemes.IconID.GridGrid16x16;
                });
                t.Items.Add(i =>
                {
                    i.Name = "CardView";
                    i.ToolTip = "Thumbnails View";
                    i.GroupName = "Layout";
                    i.Checked = ViewBag.IsCardView;
                    i.Image.IconID = DevExpress.Web.ASPxThemes.IconID.GridCards16x16;
                });
            });
            */

            settings.Columns.Add("PhotoUrl", MVCxCardViewColumnType.Image);
            settings.Columns.Add("Brand");
            settings.Columns.Add("Price", "Old price").PropertiesEdit.DisplayFormatString = "c";
            settings.Columns.Add("Discount").PropertiesEdit.DisplayFormatString = "{0}%";

            /*
            settings.Columns.Add(c =>
            {
                c.FieldName = "Total";
                c.Caption = "New price";
                //c.UnboundType = UnboundColumnType.Decimal;
                c.UnboundExpression = "[Price]- [Price] * [Discount] / 100";
                c.PropertiesEdit.DisplayFormatString = "c";
            });
            */

            settings.Columns.Add("Sensitivity", "Sensitivity, dB");
            settings.Columns.Add("Power", "Power, MW");
            settings.Columns.Add("MinFrequency", "Min Frequency, Hz");
            settings.Columns.Add("MaxFrequency", "Max Frequency, Hz");
            settings.Columns.Add("Impedance", "Impendance, ohms");
            settings.Columns.Add("Fit");

            settings.CardLayoutProperties.Items.Add(i =>
            {
                i.ColumnName = "PhotoUrl";
                i.ShowCaption = DefaultBoolean.False;
                //i.HorizontalAlign = FormLayoutHorizontalAlign.Center;
            });
            settings.CardLayoutProperties.Items.AddGroupItem(g =>
            {
                g.Name = "Common";
                g.Caption = "Common";
                g.ShowCaption = ViewBag.IsCardView ? DefaultBoolean.False : DefaultBoolean.True;
                g.GroupBoxDecoration = ViewBag.IsCardView ? GroupBoxDecoration.None : GroupBoxDecoration.HeadingLine;
                g.Items.Add("Brand");
                g.Items.Add("Fit");
                g.Items.Add("Price");
                g.Items.Add("Discount");
                //g.Items.Add("Total");
            });
            settings.CardLayoutProperties.Items.AddGroupItem(g =>
            {
                g.Name = "Specifications";
                g.Visible = !ViewBag.IsCardView;
                g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                g.Caption = "Specifications";
                g.Items.Add("Sensitivity");
                g.Items.Add("Power");
                g.Items.Add("MinFrequency");
                g.Items.Add("MaxFrequency");
                g.Items.Add("Impedance");
            });
            settings.SettingsPager.SettingsTableLayout.ColumnCount = ViewBag.IsCardView ? 3 : 1;
            settings.CardLayoutProperties.ColCount = ViewBag.IsCardView ? 1 : 3;

            /*
            settings.BeforeGetCallbackResult = (s, e) =>
            {
                var cards = (MVCxCardView)s;
                cards.ClearSort();
                switch ((HeadphoneCardsSortMode)ViewBag.SortMode)
                {
                    case HeadphoneCardsSortMode.Discount:
                        cards.SortBy(cards.Columns["Discount"], ColumnSortOrder.Descending);
                        break;
                    case HeadphoneCardsSortMode.LowPrice:
                        cards.SortBy(cards.Columns["Price"], ColumnSortOrder.Ascending);
                        break;
                    case HeadphoneCardsSortMode.HighPrice:
                        cards.SortBy(cards.Columns["Price"], ColumnSortOrder.Descending);
                        break;
                    default:
                        cards.SortBy(cards.Columns["MaxFrequency"], ColumnSortOrder.Descending);
                        cards.SortBy(cards.Columns["MinFrequency"], ColumnSortOrder.Ascending);
                        cards.SortBy(cards.Columns["Discount"], ColumnSortOrder.Descending);
                        break;
                }
            };
            */

            //settings.ClientSideEvents.ToolbarItemClick = "OnToolbarItemClick";
            settings.ClientSideEvents.BeginCallback = "OnHeadphoneCardsBeginCallback";
        }).Bind(Model).GetHtml()*@


                </div>

            </div>
        </div>
        <div class="clearfix"></div>






